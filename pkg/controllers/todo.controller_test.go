// controllers/controllers_test.go
package controllers

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"

	"github.com/kumaresan1983/todoserver/pkg/middleware"

	"github.com/kumaresan1983/todoserver/pkg/initializers"
	"github.com/kumaresan1983/todoserver/pkg/models"
	"github.com/kumaresan1983/todoserver/pkg/utils"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

func SetUpRouter() *gin.Engine {
	router := gin.Default()
	return router
}

func TestCreateTodo(t *testing.T) {
	// Set GIN_MODE to "test" to use in-memory database
	os.Setenv("GIN_MODE", "test")
	defer os.Unsetenv("GIN_MODE")

	// Initialize the in-memory database
	if err := initializers.ConnectDB(); err != nil {
		t.Fatalf("Failed to connect to the in-memory database: %v", err)
	}

	user_data := models.Users{
		Name:     "tester",
		Email:    "test@example.com",
		Provider: "Google",
	}

	if err := initializers.DB.Create(&user_data); err != nil {
		t.Fatalf("Failed to connect to the in-memory database: %v", err)
	}

	r := SetUpRouter()

	// Mock middleware that sets the current user in the context
	r.Use(func(c *gin.Context) {
		// Use the token generated by GenerateJWT for testing
		token, _ := utils.GenerateJWT("test@example.com")
		c.Set("currentUser", user_data)
		c.Request.Header.Set("Authorization", token)
		c.Next()
	})

	r.POST("/v1/api/todo", middleware.Auth(), CreateTodo)

	company := models.ToDo{
		Title:   "Demo Company",
		Content: "Demo CEO",
	}
	jsonValue, _ := json.Marshal(company)
	req, _ := http.NewRequest("POST", "/v1/api/todo", bytes.NewBuffer(jsonValue))

	w := httptest.NewRecorder()
	r.ServeHTTP(w, req)
	assert.Equal(t, http.StatusOK, w.Code)
}
